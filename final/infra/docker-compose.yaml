version: '3'
services:
  zookeeper:
    ports:
      - 22181:2181
    container_name: zookeeper
    networks:
      - confluent
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-1:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka-1
    networks:
      - confluent
    ports:
      - 29092:29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-2:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka-2
    networks:
      - confluent
    ports:
      - 29093:29093
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9093,EXTERNAL://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-3:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka-3
    networks:
      - confluent
    ports:
      - 29094:29094
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:9094,EXTERNAL://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - confluent
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092, kafka-2:9093, kafka-3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181


  schema-registry:
    image: bitnami/schema-registry:7.6
    ports:
      - '8084:8084'
    depends_on:
      - kafka-3
      - kafka-1
      - kafka-2
    environment:
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8084
      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka-1:9092,PLAINTEXT://kafka-2:9093,PLAINTEXT://kafka-3:9094
    networks:
      - confluent

  kafka-connect:
    build:
      context: ./kafka-connect
    ports:
      - "8083:8083"
      - "9875:9875"
      - "9876:9876"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry
      - zookeeper
    networks:
      - confluent
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 'kafka-connect'

      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'

      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_CONFIG_STORAGE_TOPIC: 'connect-config-storage'
      CONNECT_OFFSET_STORAGE_TOPIC: 'connect-offset-storage'
      CONNECT_STATUS_STORAGE_TOPIC: 'connect-status-storage'

      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8084/'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8084/'
      # Export JMX metrics to :9876/metrics for Prometheus
      KAFKA_JMX_PORT: '9875'
      KAFKA_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent-0.15.0.jar=9876:/opt/kafka-connect.yml"
      # Read connection password from file
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"

      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
    volumes:
      - ./confluent-hub-components/:/etc/kafka-connect/jars
      - ./data:/data


  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    links:
      - kafka-connect
    networks:
      - confluent

  grafana:
    build:
      context: ./grafana
    ports:
      - "3000:3000"
    networks:
      - confluent

  hadoop-namenode:
    image: apache/hadoop:3.4.1
    container_name: hadoop-namenode
    hostname: hadoop-namenode
    user: "root"
    restart: always
    platform: linux/amd64
    networks:
      - confluent
    deploy:
      resources:
        limits:
          cpus: "1.0"   # Ограничение использования CPU
          memory: "2g"  # Ограничение использования RAM
    shm_size: 10G
    ports:
      - "9870:9870"  # HTTP-порт для Web UI HDFS NameNode
      - "9000:9000"  # RPC порт для запросов к NameNode
    volumes:
      - ./hadoop/config/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      - ./hadoop/config/hdfs-site-namenode.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      - ./hadoop/namenode_entrypoint.sh:/namenode_entrypoint.sh
    entrypoint: [ "/bin/bash", "/namenode_entrypoint.sh" ]
    command: [ "hdfs", "namenode" ]

  hadoop-datanode-1:
    image: apache/hadoop:3.4.1
    container_name: hadoop-datanode-1
    hostname: hadoop-datanode-1
    user: "root"
    restart: always
    platform: linux/amd64
    networks:
      - confluent
    deploy:
      resources:
        limits:
          cpus: "1.0"   # Ограничение использования CPU
          memory: "2g"  # Ограничение использования RAM
    shm_size: 10G
    depends_on:
      - hadoop-namenode
    ports:
      - "9864:9864"  # HTTP-порт для Web UI DataNode №1
      - "9970:9970"  # RPC порт для запросов от NameNode
    volumes:
      - ./hadoop/config/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      - ./hadoop/config/hdfs-site-datanode-1.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      - ./hadoop/datanode_entrypoint.sh:/datanode_entrypoint.sh
    entrypoint: [ "/bin/bash", "/datanode_entrypoint.sh" ]
    command: [ "hdfs", "datanode" ]

  # Apache Spark master node
  spark-master:
    image: bitnami/spark:3.5.4
    container_name: spark-master
    networks:
      - confluent
    ports:
      - "8085:8080"  # HTTP-порт для Web UI Spark
      - "7077:7077"  # Порт для Spark master-сервис
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master

  # Apache Spark worker node №1
  spark-worker-1:
    image: bitnami/spark:3.5.4
    container_name: spark-worker-1
    networks:
      - confluent
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077

  # Apache Spark worker node №2
  spark-worker-2:
    image: bitnami/spark:3.5.4
    container_name: spark-worker-2
    networks:
      - confluent
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077


  shop-api:
    build:
      context: ../shop-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-1:9092, kafka-2:9093, kafka-3:9094
    networks:
      - confluent

  client-api:
    build:
      context: ../client-api
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      PRODUCTS_PATH: /data/products.txt
      RECOMMENDATIONS_PATH: /data/recommendations.txt
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-1:9092, kafka-2:9093, kafka-3:9094
    networks:
      - confluent
    volumes:
      - ./data:/data

  product-filter:
    build:
      context: ../product-filter
      dockerfile: Dockerfile
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - shop-api
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-1:9092, kafka-2:9093, kafka-3:9094
    networks:
      - confluent

#  analytics:
#    build:
#      context: ../analytics
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka-1
#      - kafka-2
#      - kafka-3
#      - client-api
#    networks:
#      - confluent
#    environment:
#      BOOTSTRAP_SERVERS: kafka-1:9092, kafka-2:9093, kafka-3:9094
#      HDFS_URL: hdfs://hadoop-namenode:9000

networks:
  confluent:
    driver: bridge